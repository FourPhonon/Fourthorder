#!/usr/bin/env python
# -*- coding: utf-8 -*-
#  Fourthorder, help compute anharmonic IFCs from minimal sets of displacements
#  Copyright (C) 2012-2014 Wu Li <wu.li.phys2011@gmail.com>
#  Copyright (C) 2012-2014 Jesús Carrete Montaña <jcarrete@gmail.com>
#  Copyright (C) 2012-2014 Natalio Mingo Bisquert <natalio.mingo@cea.fr>
#  Copyright (C) 2014      Antti J. Karttunen <antti.j.karttunen@iki.fi>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os.path
import glob
try:
    from lxml import etree as ElementTree
    xmllib="lxml.etree"
except ImportError:
    try:
        import xml.etree.cElementTree as ElementTree
        xmllib="cElementTree"
    except ImportError:
        import xml.etree.ElementTree as ElementTree
        xmllib="ElementTree"
try:
    import cStringIO as StringIO
except ImportError:
    import StringIO
try:
    import hashlib
    hashes=True
except ImportError:
    hashes=False

import Fourthorder_core
from Fourthorder_common import *


def read_POSCAR(directory):
    """
    Return all the relevant information contained in a POSCAR file.
    """
    with dir_context(directory):
        nruter=dict()
        nruter["lattvec"]=np.empty((3,3))
        f=open("POSCAR","r")
        firstline=f.next()
        factor=.1*float(f.next().strip())
        for i in xrange(3):
            nruter["lattvec"][:,i]=[float(j) for j in f.next().split()]
        nruter["lattvec"]*=factor
        line=f.next()
        fields=f.next().split()
        old=False
        try:
            int(fields[0])
        except ValueError:
            old=True
        if old:
            nruter["elements"]=firstline.split()
            nruter["numbers"]=np.array([int(i) for i in line.split()])
            typeline="".join(fields)
        else:
            nruter["elements"]=line.split()
            nruter["numbers"]=np.array([int(i) for i in fields],
                                       dtype=np.intc)
            typeline=f.next()
        natoms=nruter["numbers"].sum()
        nruter["positions"]=np.empty((3,natoms))
        for i in xrange(natoms):
            nruter["positions"][:,i]=[float(j) for j in f.next().split()]
        f.close()
    nruter["types"]=[]
    for i in xrange(len(nruter["numbers"])):
        nruter["types"]+=[i]*nruter["numbers"][i]
    if typeline[0]=="C":
        nruter["positions"]=sp.linalg.solve(nruter["lattvec"],
                                               nruter["positions"]*factor)
    return nruter


def write_POSCAR(poscar,filename):
    """
    Write the contents of poscar to filename.
    """
    global hashes
    f=StringIO.StringIO()
    f.write("1.0\n")
    for i in xrange(3):
        f.write("{0[0]:>20.15f} {0[1]:>20.15f} {0[2]:>20.15f}\n".format(
            (poscar["lattvec"][:,i]*10.).tolist()))
    f.write("{0}\n".format(" ".join(poscar["elements"])))
    f.write("{0}\n".format(" ".join([str(i) for i in poscar["numbers"]])))
    f.write("Direct\n")
    for i in xrange(poscar["positions"].shape[1]):
        f.write("{0[0]:>20.15f} {0[1]:>20.15f} {0[2]:>20.15f}\n".format(
            poscar["positions"][:,i].tolist()))
    if hashes:
        header=hashlib.sha1(f.getvalue()).hexdigest()
    else:
        header=filename
    with open(filename,"w") as finalf:
        finalf.write("{0}\n".format(header))
        finalf.write(f.getvalue())
    f.close()


def normalize_SPOSCAR(sposcar):
    """
    Rearrange sposcar, as generated by gen_SPOSCAR, so that it is in
    valid VASP order, and return the result.
    """
    nruter=copy.deepcopy(sposcar)
    # Order used internally (from most to least significant):
    # k,j,i,iat For VASP, iat must be the most significant index,
    # i.e., atoms of the same element must go together.
    indices=np.array(xrange(nruter["positions"].shape[1])).reshape(
        (sposcar["nc"],sposcar["nb"],sposcar["na"],-1))
    indices=np.rollaxis(indices,3,0).flatten().tolist()
    nruter["positions"]=nruter["positions"][:,indices]
    nruter["types"].sort()
    return nruter


def read_forces(filename):
    """
    Read a set of forces on atoms from filename, presumably in
    vasprun.xml format.
    """
    calculation=ElementTree.parse(filename
                                  ).getroot().find("calculation")
    for a in calculation.findall("varray"):
        if a.attrib["name"]=="forces":
            break
    nruter=[]
    for i in a.getchildren():
        nruter.append([float(j) for j in i.text.split()])
    nruter=np.array(nruter,dtype=np.double)
    return nruter


def build_unpermutation(sposcar):
    """
    Return a list of integers mapping the atoms in the normalized
    version of sposcar to their original indices.
    """
    indices=np.array(xrange(sposcar["positions"].shape[1])).reshape(
        (sposcar["nc"],sposcar["nb"],sposcar["na"],-1))
    indices=np.rollaxis(indices,3,0).flatten()
    return indices.argsort().tolist()


if __name__=="__main__":
    if len(sys.argv)!=6 or sys.argv[1] not in ("sow","reap"):
        sys.exit("Usage: {0} sow|reap na nb nc cutoff[nm/-integer]".format(sys.argv[0]))
    action=sys.argv[1]
    na,nb,nc=[int(i) for i in sys.argv[2:5]]
    if min(na,nb,nc)<1:
        sys.exit("Error: na, nb and nc must be positive integers")
    if sys.argv[5][0]=="-":
        try:
            nneigh=-int(sys.argv[5])
        except ValueError:
            sys.exit("Error: invalid cutoff")
        if nneigh==0:
            sys.exit("Error: invalid cutoff")
    else:
        nneigh=None
        try:
            frange=float(sys.argv[5])
        except ValueError:
            sys.exit("Error: invalid cutoff")
        if frange==0.:
            sys.exit("Error: invalid cutoff")
    print "Reading POSCAR"
    poscar=read_POSCAR(".")
    natoms=len(poscar["types"])
    print "Analyzing the symmetries"
    symops=Fourthorder_core.SymmetryOperations(
        poscar["lattvec"],poscar["types"],
        poscar["positions"].T,SYMPREC)
    print "- Symmetry group {0} detected".format(symops.symbol)
    print "- {0} symmetry operations".format(symops.translations.shape[0])
    print "Creating the supercell"
    sposcar=gen_SPOSCAR(poscar,na,nb,nc)
    ntot=natoms*na*nb*nc
    ngrid=[na,nb,nc]
    print "Computing all distances in the supercell"
    dmin,nequi,shifts=calc_dists(sposcar)
    if nneigh!=None:
        frange=calc_frange(poscar,sposcar,nneigh,dmin)
        print "- Automatic cutoff: {0} nm".format(frange)
    else:
        print "- User-defined cutoff: {0} nm".format(frange)
    print "Looking for an irreducible set of fourth-order IFCs"
    wedge=Fourthorder_core.Wedge(poscar,sposcar,symops,dmin,
                                nequi,shifts,frange)
    print "- {0} quartet equivalence classes found".format(wedge.nlist)
    list6=wedge.build_list4()
    nirred=len(list6)
  #  print np.shape(list6),list6
    nruns=8*nirred
    print "- {0} DFT runs are needed".format(nruns)
    if action=="sow":
        print sowblock
        print "Writing undisplaced coordinates to 4TH.SPOSCAR"
        write_POSCAR(normalize_SPOSCAR(sposcar),"4TH.SPOSCAR")
      #  print "Write coordinations to xyz.txt"
      #  write_pos(sposcar,ngrid,natoms,"xyz.txt")
      #  print "Output cell+atom indices from supercell indices"
      #  id2ind(ngrid,natoms,"cellbasismap.txt")
      #  print "Output cell+atom indices for each quartet"
      #  write_indexcell(ngrid,poscar,sposcar,dmin,nequi,shifts,frange,"indexfull.txt")
        width=len(str(8*(len(list6)+1)))
        namepattern="4TH.POSCAR.{{0:0{0}d}}".format(width)
        print "Writing displaced coordinates to 4TH.POSCAR.*"
        for i,e in enumerate(list6):
            for n in xrange(8):
                isign=(-1)**(n//4)
                jsign=(-1)**(n%4//2)
                ksign=(-1)**(n%2)
                # print e[2],e[5],isign,e[1],e[4],jsign,e[0],e[3],ksign
                # Start numbering the files at 1 for aesthetic
                # reasons.
                number=nirred*n+i+1
                dsposcar=normalize_SPOSCAR(
                    move_three_atoms(sposcar,
                                   e[2],e[5],isign*H,
                                   e[1],e[4],jsign*H,
                                   e[0],e[3],ksign*H))
                filename=namepattern.format(number)
                write_POSCAR(dsposcar,filename)
    else:
        print reapblock
        print "XML ElementTree implementation: {0}".format(xmllib)
        print "Waiting for a list of vasprun.xml files on stdin"
        filelist=[]
        for l in sys.stdin:
            s=l.strip()
            if len(s)==0:
                continue
            filelist.append(s)
        nfiles=len(filelist)
        print "- {0} filenames read".format(nfiles)
        if nfiles!=nruns:
            sys.exit("Error: {0} filenames were expected".
                     format(nruns))
        for i in filelist:
            if not os.path.isfile(i):
                sys.exit("Error: {0} is not a regular file".
                         format(i))
        print "Reading the forces"
        p=build_unpermutation(sposcar)
        forces=[]
        for i in filelist:
            forces.append(read_forces(i)[p,:])
            print "- {0} read successfully".format(i)
            res=forces[-1].mean(axis=0)
            print "- \t Average force:"
            print "- \t {0} eV/(A * atom)".format(res)
        print "Computing an irreducible set of anharmonic force constants"
        phipart=np.zeros((3,nirred,ntot))
        for i,e in enumerate(list6):
            for n in xrange(8):
                isign=(-1)**(n//4)
                jsign=(-1)**(n%4//2)
                ksign=(-1)**(n%2)
                number=nirred*n+i
                phipart[:,i,:]-=isign*jsign*ksign*forces[number].T
        phipart/=(8000.*H*H*H)
        print "Reconstructing the full array"
        phifull=Fourthorder_core.reconstruct_ifcs(phipart,wedge,list6,poscar,sposcar)
        print "Writing the constants to FORCE_CONSTANTS_4TH"
        write_ifcs(phifull,poscar,sposcar,dmin,nequi,shifts,frange,"FORCE_CONSTANTS_4TH")
  #      check_ASRs(phifull,poscar,sposcar,"ASRs.txt")
    print doneblock
